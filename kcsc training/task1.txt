;nasm -f elf test.asm;ld -m elf_i386 -s -o test test.o
SECTION .data
    KEY        TIMES    4096 DB -1
    lenKEY 		             DD 0
    plain_text TIMES    4096 DB -1
    lenplain_text            DD 0
    MAX                      DD 4096
    intro1 db "Enter Key: ", 10, ' '
    len_1 equ $- intro1
    intro2 db "Enter Message: ", 10, ' '
    len_2 equ $- intro2
    intro3 db "ENCRYPTED :", 10, ' '
    len_3 equ $- intro3

SECTION .bss

    S resb 256
    Message resb 4096
    Key resb 4096

SECTION .text

    GLOBAL _start

PrintF:
    push ebp                ;push ebp pointer into the stack
    mov ebp,esp             ;move esp-pointer to ebp-pointer
    sub esp, 0x20           ;allocate memory for the variable
    pusha

    mov eax, 4              ;system_write
    mov ebx, 1              ;stdout
    lea ecx,[ebp+0xc]
	mov edx,[ebp+0x8]
	int 0x80                ;call kernel

    popa
    mov esp, ebp
    pop ebp                 ;pop up pointer
    retn                    ;return

Print_A_Single_CharF:
   
    push ebp                ;push ebp pointer into the stack
    mov ebp, esp            ;move esp-pointer to ebp-pointer
    sub esp, 0x20           ;allocate memory for the variable
    mov esi, [ebp+0x8]
        
        loopPrintF:
        lodsb               ;load byte at address DS:(E)SI into eax
        push eax            ;push the char in al into the stack
        push 1
        call PrintF

        cmp al, 0xA         ;compare the last char with "\n"
        jnz loopPrintF

    mov esp, ebp            
    pop ebp                 ;pop up the pointer
    retn                    ;return

ScanF:
    
    push ebp                ;push ebp pointer into the stack
    mov ebp, esp            ;move esp-pointer to ebp-pointer
    sub esp, 0x20           ;allocate memory for the variable

    mov eax, 3              ;system_read
    mov ebx, 0              ;stdin
    mov ecx, [ebp+0x8]
    xor edx, edx
    mov edx, MAX
    int 0x80                ;call kernel

    mov esp, ebp
    pop ebp                 ;pop up the pointer
    retn                    ;return
   
SwapF:

    push ebp                ;push ebp pointer into the stack
    mov ebp, esp            ;move esp-pointer to ebp-pointer
    sub esp, 0x30           ;allocate memory for the variable
    pusha

    mov eax, [ebp+0x8]    
    mov al, [eax]           ;move S[(i+1)%256] to al      
    mov ebx, [ebp+0xc]    
    mov bl, [ebx]           ;move S[(j+S[i])%256] to bl
    xchg al, bl             ;swap S[(i+1)%256] and S[(j+S[i])%256]

    mov esi, [ebp+0x8]      
    mov edi, [ebp+0xc]
    mov [esi], al
    mov [edi], bl
    popa
    mov esp, ebp
    pop ebp                 ;pop up the pointer
    retn                    ;return  

End_Loop_PrintF:
	
    add eax, 0x30
	push eax
	push 1
	inc ecx
	jmp Loop_PrintF

Print_NumF:
	 
    push ebp                ;push ebp pointer into the stack
    mov ebp, esp            ;move esp-pointer to ebp-pointer
	sub esp, 0x30            ;allocate memory for the variable    
 	pusha
 	mov eax, [ebp+8]
	xor edx, edx
 	xor ecx, ecx

	    Loop_DivideF:
	      	xor edx, edx
		 	mov ebx, 10
		 	div ebx 
		 	add edx, 0x30   
		 	push edx
		 	push 1
	 	  	inc ecx
	 	  	cmp eax, 10
	 	  	jae Loop_DivideF
			jmp End_Loop_PrintF

	        Loop_PrintF:
	 	        call PrintF
	 	        pop eax
	  	        pop eax
	 	        dec ecx
	 	        cmp ecx, 0
	 	        jnz Loop_PrintF


		        push ' '
		        push 1
		        call PrintF
		        pop eax
		        pop eax
		        popa
		        mov esp, ebp
		        pop ebp
		        retn
KSAF:

    push ebp                ;push ebp pointer into the stack
    mov ebp, esp            ;move esp-pointer to ebp-pointer
    sub esp, 0x20           ;allocate memory for the variable
    
    mov edi, [ebp+0x8]      ;key
    mov esi, [ebp+0xc]      ;S
    xor edx, edx            
    xor ecx, ecx    
    xor eax, eax
    mov ecx, 256
        
        KSA1F:
           
            dec ecx
            mov [ebx+ecx], cl
            cmp ecx, 0
            
            jnz KSA1F
   
    lea eax, [ebp-4]
    xor ebx, ebx
    mov [eax], ebx
    xor esi, esi
    xor ecx, ecx
     
       KSA2F:
            
            mov eax, ecx
  	        xor edx, edx
  	        mov ebx, [lenKEY]
  	        div ebx
  	        mov eax, edx
  	        mov edx, [ebp+8]
  	        mov edx, [edx+eax];KEY[i%lenKEY]
  	        mov eax, edx

  	        mov edx, [ebp+0xc]
  	        mov edx, [edx+ecx]
	        add eax, edx
	        mov edx, 0xff
	        and eax, edx

	        mov edx, [ebp-0x4]
	        add eax, edx

	        xor edx, edx
	        mov ebx, 256
	        div ebx
        	mov eax, edx

	        lea edx, [ebp-0x4]
	        mov [edx], eax

	        mov edx, [ebp+0xc]
	        lea edx, [edx+ecx]
	        push edx
	        mov edx, [ebp+0xc]
	        lea edx, [edx+eax]
	        push edx
	        call SwapF


 	inc ecx
  	cmp ecx, 256
  	jne KSA2F

  mov esp, ebp
  pop ebp
  retn

PRGAF:

    push ebp
    mov ebp, esp
    sub esp, 0x20
  	push intro3
  	call Print_A_Single_CharF
  	xor ecx, ecx

  	lea eax, [ebp-0x4] ;i=0
  	mov ebx, 0
  	mov [eax], ebx
  	lea eax, [ebp-0x8] ;j=0
  	mov ebx, 0
  	mov [eax], ebx
   	;[ebp+8] - S
  	loopPRGA:
  		mov eax, [ebp-0x4]
  		inc eax
  		mov ebx, 256
  		xor edx, edx
  		div ebx
  		mov [ebp-0x4], edx ;i

  		mov eax, [ebp+0x8];S 
  		mov al, [eax+edx]
  		mov bl, [ebp-0x8];j
  		add al, bl; j=(j+S[i])
  		movzx eax, al

  		xor edx, edx
  		mov ebx, 256
  		div ebx
  		mov eax, edx
  		lea edx, [ebp-0x8];j
  		mov [edx], al
  		;al - j

  		movzx eax, al
  		mov ebx, [ebp+0x8]
  		lea ebx, [ebx+eax]
  		push ebx

  		xor esi, esi
  		mov bl, [ebx]
  		movzx esi, bl

  		mov eax, [ebp-0x4];i
  		mov ebx, [ebp+0x8];s
  		lea ebx, [ebx+eax]
  		push ebx

  		mov bl,[ebx]
  		movzx ebx,bl
  		add esi,ebx

  		call SwapF
  		mov eax, esi
  		mov ebx, 0xff
  		and eax, ebx
  		xor edx, edx
  		mov ebx, 256
  		div ebx


  		mov eax, [ebp+8];s
  		xor ebx, ebx
  		mov bl, [eax+edx]
  		movzx ebx, bl

  		mov eax, [ebp+0xc];plain text
  		mov al, [eax+ecx]
  		movzx eax, al
  		xor eax, ebx

  		push eax
  		call Print_NumF

  		inc ecx
  		mov eax, [lenplain_text]
  		cmp ecx, eax
  		jne loopPRGA


    push 10
    push 1
    call PrintF
    mov esp,ebp
    pop ebp
    retn

RC4:
  push ebp
  mov ebp, esp
  sub esp,0x20

  mov eax,[ebp+0xc] ;key
  mov ebx,S 	   

  push S
  push eax
  call KSAF

  mov eax,[ebp+0x8];message
  push eax
  push S
  call PRGAF


  mov esp,ebp
  pop ebp
  ret
StoreF:
 
  push ebp
  mov ebp, esp
  sub esp,0x20
  pusha
  mov ecx, [ebp+0x10] ;len of string
  mov esi, [ebp+0x8] ;string
  mov edi, [ebp+0xc] ;Array u wanna push

	Loop_StoreF:
	    lodsb
	  	cmp al, 0xa
	  	jz next
	  	mov [edi+ecx],al

  		dec ecx
  		jnz Loop_StoreF
    next:
	    popa
	    mov esp,ebp
	    pop ebp
	    retn

LengthF:
  
  push ebp
  mov ebp, esp
  sub esp,0x20

  mov ecx,0
  mov esi,[ebp+8];string
  	Loop_LengthF:
  		lodsb
  		inc ecx
  		cmp al,10
  		jne Loop_LengthF
  dec ecx ; remove '\n'
  mov eax,ecx
  mov esp,ebp
  pop ebp
  retn
_start:


  push intro1
  call Print_A_Single_CharF

  push Key
  call ScanF	;get input
  push Key
  call LengthF
  mov eax, lenKEY
  mov [eax], ecx

  mov eax, [lenKEY]
  push eax
  mov eax, KEY
  push eax
  push Key
  call StoreF

  push intro2
  call Print_A_Single_CharF

  push Message
  call ScanF
  push Message
  call LengthF
  mov eax, lenplain_text
  mov [eax], ecx

  mov eax, [lenplain_text]
  push eax
  mov eax, plain_text
  push eax
  push Message
  call StoreF

  ;rc4
  push Key
  push Message
  call RC4

  mov eax, 1	
  mov ebx, 0
  int 0x80








    



    
    










